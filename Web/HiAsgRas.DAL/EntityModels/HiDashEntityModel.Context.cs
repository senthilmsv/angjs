//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HiAsgRAS.DAL.EntityModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;

    public partial class HiDashEntities : DbContext
    {
        public HiDashEntities()
            : base("name=HiDashEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicationEntity> ApplicationEntities { get; set; }
        public virtual DbSet<ApplicationInfomation> ApplicationInfomations { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<BAOInfo> BAOInfoes { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<HiradApp> HiradApps { get; set; }
        public virtual DbSet<HiradDbMonitor> HiradDbMonitors { get; set; }
        public virtual DbSet<HiradDbMonitorLog> HiradDbMonitorLogs { get; set; }
        public virtual DbSet<HiradServer> HiradServers { get; set; }
        public virtual DbSet<HiradServerLog> HiradServerLogs { get; set; }
        public virtual DbSet<HiradWeb> HiradWebs { get; set; }
        public virtual DbSet<HiradWebLog> HiradWebLogs { get; set; }
        public virtual DbSet<LayerInfo> LayerInfoes { get; set; }
        public virtual DbSet<RenewalDetail> RenewalDetails { get; set; }
        public virtual DbSet<SharedPath> SharedPaths { get; set; }
        public virtual DbSet<StatusType> StatusTypes { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
    
        [DbFunction("Entities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[Entities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<BAOSearch_Result> BAOSearch(string primaryOwnerName, string primaryOwnerDept, string secondaryOwnerName, string secondaryOwnerDept)
        {
            var primaryOwnerNameParameter = primaryOwnerName != null ?
                new ObjectParameter("PrimaryOwnerName", primaryOwnerName) :
                new ObjectParameter("PrimaryOwnerName", typeof(string));
    
            var primaryOwnerDeptParameter = primaryOwnerDept != null ?
                new ObjectParameter("PrimaryOwnerDept", primaryOwnerDept) :
                new ObjectParameter("PrimaryOwnerDept", typeof(string));
    
            var secondaryOwnerNameParameter = secondaryOwnerName != null ?
                new ObjectParameter("SecondaryOwnerName", secondaryOwnerName) :
                new ObjectParameter("SecondaryOwnerName", typeof(string));
    
            var secondaryOwnerDeptParameter = secondaryOwnerDept != null ?
                new ObjectParameter("SecondaryOwnerDept", secondaryOwnerDept) :
                new ObjectParameter("SecondaryOwnerDept", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BAOSearch_Result>("BAOSearch", primaryOwnerNameParameter, primaryOwnerDeptParameter, secondaryOwnerNameParameter, secondaryOwnerDeptParameter);
        }
    
        public virtual int ClearLogData(Nullable<int> logDays)
        {
            var logDaysParameter = logDays.HasValue ?
                new ObjectParameter("LogDays", logDays) :
                new ObjectParameter("LogDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearLogData", logDaysParameter);
        }
    
        public virtual ObjectResult<GetAllDBLogStatusByLastRun_Result> GetAllDBLogStatusByLastRun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDBLogStatusByLastRun_Result>("GetAllDBLogStatusByLastRun");
        }
    
        public virtual ObjectResult<GetAllLogDetailsByServer_Result> GetAllLogDetailsByServer(Nullable<int> serverId, string systemName)
        {
            var serverIdParameter = serverId.HasValue ?
                new ObjectParameter("ServerId", serverId) :
                new ObjectParameter("ServerId", typeof(int));
    
            var systemNameParameter = systemName != null ?
                new ObjectParameter("SystemName", systemName) :
                new ObjectParameter("SystemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLogDetailsByServer_Result>("GetAllLogDetailsByServer", serverIdParameter, systemNameParameter);
        }
    
        public virtual ObjectResult<GetAllServerLogStatusByLastRun_Result> GetAllServerLogStatusByLastRun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllServerLogStatusByLastRun_Result>("GetAllServerLogStatusByLastRun");
        }
    
        public virtual ObjectResult<GetAllWebsiteLogStatusByLastRun_Result> GetAllWebsiteLogStatusByLastRun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllWebsiteLogStatusByLastRun_Result>("GetAllWebsiteLogStatusByLastRun");
        }
    
        public virtual ObjectResult<GetAppRenewalDate_Result> GetAppRenewalDate(Nullable<short> dayCount)
        {
            var dayCountParameter = dayCount.HasValue ?
                new ObjectParameter("DayCount", dayCount) :
                new ObjectParameter("DayCount", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppRenewalDate_Result>("GetAppRenewalDate", dayCountParameter);
        }
    
        public virtual ObjectResult<GetClientAppDetailsById_Result> GetClientAppDetailsById(Nullable<int> appId)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientAppDetailsById_Result>("GetClientAppDetailsById", appIdParameter);
        }
    
        public virtual ObjectResult<GetDBDetailsById_Result> GetDBDetailsById(Nullable<int> dbId)
        {
            var dbIdParameter = dbId.HasValue ?
                new ObjectParameter("DbId", dbId) :
                new ObjectParameter("DbId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDBDetailsById_Result>("GetDBDetailsById", dbIdParameter);
        }
    
        public virtual ObjectResult<GetRenewalDetail_Result> GetRenewalDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRenewalDetail_Result>("GetRenewalDetail");
        }
    
        public virtual ObjectResult<GetServerLogStatusByDate_Result> GetServerLogStatusByDate(Nullable<System.DateTime> loggedAt)
        {
            var loggedAtParameter = loggedAt.HasValue ?
                new ObjectParameter("LoggedAt", loggedAt) :
                new ObjectParameter("LoggedAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServerLogStatusByDate_Result>("GetServerLogStatusByDate", loggedAtParameter);
        }
    
        public virtual ObjectResult<GetSharedNWPathDetails_Result> GetSharedNWPathDetails(Nullable<int> sharedPathId)
        {
            var sharedPathIdParameter = sharedPathId.HasValue ?
                new ObjectParameter("SharedPathId", sharedPathId) :
                new ObjectParameter("SharedPathId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSharedNWPathDetails_Result>("GetSharedNWPathDetails", sharedPathIdParameter);
        }
    
        public virtual ObjectResult<GetWebAppDetailsById_Result> GetWebAppDetailsById(Nullable<int> webId)
        {
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWebAppDetailsById_Result>("GetWebAppDetailsById", webIdParameter);
        }
    
        public virtual ObjectResult<HiradAppListSearch_Result> HiradAppListSearch(string application, string aPPServerName, string vendor, string applicationLayer, string websiteURL, string aBCID, string sATName, Nullable<System.DateTime> appRenewalDtFrom, Nullable<System.DateTime> appRenewalDtTo)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var aPPServerNameParameter = aPPServerName != null ?
                new ObjectParameter("APPServerName", aPPServerName) :
                new ObjectParameter("APPServerName", typeof(string));
    
            var vendorParameter = vendor != null ?
                new ObjectParameter("Vendor", vendor) :
                new ObjectParameter("Vendor", typeof(string));
    
            var applicationLayerParameter = applicationLayer != null ?
                new ObjectParameter("ApplicationLayer", applicationLayer) :
                new ObjectParameter("ApplicationLayer", typeof(string));
    
            var websiteURLParameter = websiteURL != null ?
                new ObjectParameter("WebsiteURL", websiteURL) :
                new ObjectParameter("WebsiteURL", typeof(string));
    
            var aBCIDParameter = aBCID != null ?
                new ObjectParameter("ABCID", aBCID) :
                new ObjectParameter("ABCID", typeof(string));
    
            var sATNameParameter = sATName != null ?
                new ObjectParameter("SATName", sATName) :
                new ObjectParameter("SATName", typeof(string));
    
            var appRenewalDtFromParameter = appRenewalDtFrom.HasValue ?
                new ObjectParameter("AppRenewalDtFrom", appRenewalDtFrom) :
                new ObjectParameter("AppRenewalDtFrom", typeof(System.DateTime));
    
            var appRenewalDtToParameter = appRenewalDtTo.HasValue ?
                new ObjectParameter("AppRenewalDtTo", appRenewalDtTo) :
                new ObjectParameter("AppRenewalDtTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HiradAppListSearch_Result>("HiradAppListSearch", applicationParameter, aPPServerNameParameter, vendorParameter, applicationLayerParameter, websiteURLParameter, aBCIDParameter, sATNameParameter, appRenewalDtFromParameter, appRenewalDtToParameter);
        }
    
        public virtual ObjectResult<HiradDbList_Result> HiradDbList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HiradDbList_Result>("HiradDbList");
        }
    
        public virtual ObjectResult<HiradServerListSearch_Result> HiradServerListSearch(string systemName, string location, string iPAddress, string processor, string platform, string aBCId, string costCenter, string serialNumber)
        {
            var systemNameParameter = systemName != null ?
                new ObjectParameter("SystemName", systemName) :
                new ObjectParameter("SystemName", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var processorParameter = processor != null ?
                new ObjectParameter("Processor", processor) :
                new ObjectParameter("Processor", typeof(string));
    
            var platformParameter = platform != null ?
                new ObjectParameter("Platform", platform) :
                new ObjectParameter("Platform", typeof(string));
    
            var aBCIdParameter = aBCId != null ?
                new ObjectParameter("ABCId", aBCId) :
                new ObjectParameter("ABCId", typeof(string));
    
            var costCenterParameter = costCenter != null ?
                new ObjectParameter("CostCenter", costCenter) :
                new ObjectParameter("CostCenter", typeof(string));
    
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HiradServerListSearch_Result>("HiradServerListSearch", systemNameParameter, locationParameter, iPAddressParameter, processorParameter, platformParameter, aBCIdParameter, costCenterParameter, serialNumberParameter);
        }
    
        public virtual ObjectResult<HiradServerLogStatus_Result> HiradServerLogStatus(Nullable<int> serverId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var serverIdParameter = serverId.HasValue ?
                new ObjectParameter("ServerId", serverId) :
                new ObjectParameter("ServerId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HiradServerLogStatus_Result>("HiradServerLogStatus", serverIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<HiradWebAppListSearch_Result> HiradWebAppListSearch(string webFolder, string active, string status, string remedyGroupName, string webSite, string webStat, string aBCID, string appServer)
        {
            var webFolderParameter = webFolder != null ?
                new ObjectParameter("WebFolder", webFolder) :
                new ObjectParameter("WebFolder", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remedyGroupNameParameter = remedyGroupName != null ?
                new ObjectParameter("RemedyGroupName", remedyGroupName) :
                new ObjectParameter("RemedyGroupName", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var webStatParameter = webStat != null ?
                new ObjectParameter("WebStat", webStat) :
                new ObjectParameter("WebStat", typeof(string));
    
            var aBCIDParameter = aBCID != null ?
                new ObjectParameter("ABCID", aBCID) :
                new ObjectParameter("ABCID", typeof(string));
    
            var appServerParameter = appServer != null ?
                new ObjectParameter("AppServer", appServer) :
                new ObjectParameter("AppServer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HiradWebAppListSearch_Result>("HiradWebAppListSearch", webFolderParameter, activeParameter, statusParameter, remedyGroupNameParameter, webSiteParameter, webStatParameter, aBCIDParameter, appServerParameter);
        }
    
        public virtual int InsertRenewalDetail(Nullable<int> applicationId, string uniqueId, ObjectParameter recordCount)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(int));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRenewalDetail", applicationIdParameter, uniqueIdParameter, recordCount);
        }
    
        public virtual int UpdateMonitorInfo(string ids, string type)
        {
            var idsParameter = ids != null ?
                new ObjectParameter("Ids", ids) :
                new ObjectParameter("Ids", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMonitorInfo", idsParameter, typeParameter);
        }
    
        public virtual int UpdateRenewalDetail(Nullable<bool> isRenewalRequired, string uniqueId)
        {
            var isRenewalRequiredParameter = isRenewalRequired.HasValue ?
                new ObjectParameter("IsRenewalRequired", isRenewalRequired) :
                new ObjectParameter("IsRenewalRequired", typeof(bool));
    
            var uniqueIdParameter = uniqueId != null ?
                new ObjectParameter("UniqueId", uniqueId) :
                new ObjectParameter("UniqueId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRenewalDetail", isRenewalRequiredParameter, uniqueIdParameter);
        }
    
        public virtual int UpdateServerInfo(string ids, string type, Nullable<int> newServerId, Nullable<int> oldServerId)
        {
            var idsParameter = ids != null ?
                new ObjectParameter("Ids", ids) :
                new ObjectParameter("Ids", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var newServerIdParameter = newServerId.HasValue ?
                new ObjectParameter("newServerId", newServerId) :
                new ObjectParameter("newServerId", typeof(int));
    
            var oldServerIdParameter = oldServerId.HasValue ?
                new ObjectParameter("oldServerId", oldServerId) :
                new ObjectParameter("oldServerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateServerInfo", idsParameter, typeParameter, newServerIdParameter, oldServerIdParameter);
        }
    
        public virtual ObjectResult<UserSearch_Result> UserSearch(string userName, string nUID, string userType, Nullable<bool> isActive)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var nUIDParameter = nUID != null ?
                new ObjectParameter("NUID", nUID) :
                new ObjectParameter("NUID", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSearch_Result>("UserSearch", userNameParameter, nUIDParameter, userTypeParameter, isActiveParameter);
        }
    }
}
